{"id":"node_modules/gifuct-js/lib/deinterlace.js","dependencies":[{"name":"E:\\Dev\\fabric.js\\gif_canvas\\package.json","includedInParent":true,"mtime":1716234648000},{"name":"E:\\Dev\\fabric.js\\gif_canvas\\node_modules\\gifuct-js\\package.json","includedInParent":true,"mtime":1716213157948},{"name":"E:\\Dev\\fabric.js\\gif_canvas\\node_modules\\gifuct-js\\.babelrc","includedInParent":true,"mtime":1716213155328}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deinterlace = void 0;\n\n/**\r\n * Deinterlace function from https://github.com/shachaf/jsgif\r\n */\nvar deinterlace = function deinterlace(pixels, width) {\n  var newPixels = new Array(pixels.length);\n  var rows = pixels.length / width;\n\n  var cpRow = function cpRow(toRow, fromRow) {\n    var fromPixels = pixels.slice(fromRow * width, (fromRow + 1) * width);\n    newPixels.splice.apply(newPixels, [toRow * width, width].concat(fromPixels));\n  }; // See appendix E.\n\n\n  var offsets = [0, 4, 2, 1];\n  var steps = [8, 8, 4, 2];\n  var fromRow = 0;\n\n  for (var pass = 0; pass < 4; pass++) {\n    for (var toRow = offsets[pass]; toRow < rows; toRow += steps[pass]) {\n      cpRow(toRow, fromRow);\n      fromRow++;\n    }\n  }\n\n  return newPixels;\n};\n\nexports.deinterlace = deinterlace;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/gifuct-js/lib/deinterlace.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}}],"sources":{"node_modules/gifuct-js/lib/deinterlace.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deinterlace = void 0;\n\n/**\r\n * Deinterlace function from https://github.com/shachaf/jsgif\r\n */\nvar deinterlace = function deinterlace(pixels, width) {\n  var newPixels = new Array(pixels.length);\n  var rows = pixels.length / width;\n\n  var cpRow = function cpRow(toRow, fromRow) {\n    var fromPixels = pixels.slice(fromRow * width, (fromRow + 1) * width);\n    newPixels.splice.apply(newPixels, [toRow * width, width].concat(fromPixels));\n  }; // See appendix E.\n\n\n  var offsets = [0, 4, 2, 1];\n  var steps = [8, 8, 4, 2];\n  var fromRow = 0;\n\n  for (var pass = 0; pass < 4; pass++) {\n    for (var toRow = offsets[pass]; toRow < rows; toRow += steps[pass]) {\n      cpRow(toRow, fromRow);\n      fromRow++;\n    }\n  }\n\n  return newPixels;\n};\n\nexports.deinterlace = deinterlace;"},"lineCount":35}},"error":null,"hash":"17bfa67af4f497ce0228338d0d3cae4b","cacheData":{"env":{}}}